MAKEFLAGS += --no-builtin-rules
MAKEFLAGS += --no-builtin-variables

CC = gcc
AR = ar

INCLUDEDIR = ./include
BUILDDIR   = ./build
SRCDIR     = ./src

SOURCES = $(wildcard $(SRCDIR)/*.c)

BASE_CFLAGS    = -MMD -MP -Wall -Wextra -std=c23 -I$(INCLUDEDIR)
DEBUG_CFLAGS   = -g3 -O0 -DDEBUG -fsanitize=address,leak,undefined
RELEASE_CFLAGS = -O2 -Werror

DYNAMIC_DEBUG_OBJECTS   = $(SOURCES:$(SRCDIR)/%.c=$(BUILDDIR)/dynamic/debug/%.o)
DYNAMIC_RELEASE_OBJECTS = $(SOURCES:$(SRCDIR)/%.c=$(BUILDDIR)/dynamic/release/%.o)
STATIC_DEBUG_OBJECTS    = $(SOURCES:$(SRCDIR)/%.c=$(BUILDDIR)/static/debug/%.o)
STATIC_RELEASE_OBJECTS  = $(SOURCES:$(SRCDIR)/%.c=$(BUILDDIR)/static/release/%.o)


# Check if CC changed since last build for the current target
# Clean the right folder if it's the case

DYNAMIC_DEBUG_BUILDINFO_FILE   = $(BUILDDIR)/dynamic/debug/.buildinfo
DYNAMIC_RELEASE_BUILDINFO_FILE = $(BUILDDIR)/dynamic/release/.buildinfo
STATIC_DEBUG_BUILDINFO_FILE    = $(BUILDDIR)/static/debug/.buildinfo
STATIC_RELEASE_BUILDINFO_FILE  = $(BUILDDIR)/static/release/.buildinfo

DYNAMIC_DEBUG_BUILDINFO   = $(file < $(DYNAMIC_DEBUG_BUILDINFO_FILE))
DYNAMIC_RELEASE_BUILDINFO = $(file < $(DYNAMIC_RELEASE_BUILDINFO_FILE))
STATIC_DEBUG_BUILDINFO    = $(file < $(STATIC_DEBUG_BUILDINFO_FILE))
STATIC_RELEASE_BUILDINFO  = $(file < $(STATIC_RELEASE_BUILDINFO_FILE))

# Do not simplify the ifeq statement in this variable with an $(if ...) function
# or it may break when using rules like 'all' or 'default'. Still not so sure why.
define check-cc-change =
ifeq ($(MAKECMDGOALS),$(1))
  $(if $(and $(2),$(filter-out $(2),$(CC))),$(shell rm -rf $(3) $(1)))
endif
endef

# Eval's seem to be crucial here, don't mess up with it.
$(eval $(call check-cc-change,libescape-debug.so,$(DYNAMIC_DEBUG_BUILDINFO),$(BUILDDIR)/dynamic/debug))
$(eval $(call check-cc-change,libescape-release.so,$(DYNAMIC_RELEASE_BUILDINFO),$(BUILDDIR)/dynamic/release))
$(eval $(call check-cc-change,libescape-debug.a,$(STATIC_DEBUG_BUILDINFO),$(BUILDDIR)/static/debug))
$(eval $(call check-cc-change,libescape-release.a,$(STATIC_RELEASE_BUILDINFO),$(BUILDDIR)/static/release))

.PHONY: all clean default

default: libescape-release.so
all: libescape-debug.so libescape-release.so libescape-release.a libescape-debug.a

clean:
	rm -rf $(BUILDDIR) libescape*

# Library targets (having the corresponding object files as prequisites)
libescape-debug.so: $(DYNAMIC_DEBUG_OBJECTS)
	$(CC) -shared $^ -o $@

libescape-release.so: $(DYNAMIC_RELEASE_OBJECTS)
	$(CC) -shared $^ -o $@

libescape-debug.a: $(STATIC_DEBUG_OBJECTS)
	$(AR) rcs $@ $^

libescape-release.a: $(STATIC_RELEASE_OBJECTS)
	$(AR) rcs $@ $^

# Include dependency files generated by gcc (see BASE_CFLAGS)
# They are file specific targets with the right prequisites based on actual #include directives
-include $(DYNAMIC_DEBUG_OBJECTS:.o=.d)
-include $(DYNAMIC_RELEASE_OBJECTS:.o=.d)
-include $(STATIC_DEBUG_OBJECTS:.o=.d)
-include $(STATIC_RELEASE_OBJECTS:.o=.d)

# Pattern rules for each build type (object files)
$(BUILDDIR)/dynamic/debug/%.o: $(SRCDIR)/%.c
	$(shell mkdir -p $(BUILDDIR)/dynamic/debug)
	$(file > $(DYNAMIC_DEBUG_BUILDINFO_FILE),$(CC))
	$(CC) $(BASE_CFLAGS) $(DEBUG_CFLAGS) -fPIC -c $< -o $@

$(BUILDDIR)/dynamic/release/%.o: $(SRCDIR)/%.c
	$(shell mkdir -p $(BUILDDIR)/dynamic/release)
	$(file > $(DYNAMIC_RELEASE_BUILDINFO_FILE),$(CC))
	$(CC) $(BASE_CFLAGS) $(RELEASE_CFLAGS) -fPIC -c $< -o $@

$(BUILDDIR)/static/debug/%.o: $(SRCDIR)/%.c
	$(shell mkdir -p $(BUILDDIR)/static/debug)
	$(file > $(STATIC_DEBUG_BUILDINFO_FILE),$(CC))
	$(CC) $(BASE_CFLAGS) $(DEBUG_CFLAGS) -c $< -o $@

$(BUILDDIR)/static/release/%.o: $(SRCDIR)/%.c
	$(shell mkdir -p $(BUILDDIR)/static/release)
	$(file > $(STATIC_RELEASE_BUILDINFO_FILE),$(CC))
	$(CC) $(BASE_CFLAGS) $(RELEASE_CFLAGS) -c $< -o $@

