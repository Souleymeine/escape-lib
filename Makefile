# ~~~ Configurable options (here are the default, overrideable from cmdline) ~~~

CC = gcc
AR = ar

STRIP = no

OPTIM_LVL      = 2
DEBUG_VERB_LVL = 3

# ~~~ Make options ~~~
SHELL = /bin/sh
override MAKEFLAGS += --no-builtin-rules --no-builtin-variables

# ~~~ Directories ~~~
include_dir := ./include
build_dir   := ./build
src_dir     := ./src
test_dir    := ./test

# ~~~ Flags ~~~
OBJ_CFLAGS     := -MMD -MP -c
BASE_CFLAGS    := -std=c23 -Wall -Wextra -I$(include_dir) $(CFLAGS)
DEBUG_CFLAGS   := -g$(DEBUG_VERB_LVL) -O0 -DDEBUG -fsanitize=address,leak,undefined
RELEASE_CFLAGS := -O$(OPTIM_LVL) -Werror
ifeq ($(STRIP),yes)
  STRIP_CFLAG   = -s
endif

# ~~~ Files (sources, objects) ~~~
sources                 := $(wildcard $(src_dir)/*.c)
test_sources            := $(wildcard $(test_dir)/*.c)
dynamic_debug_objects   := $(sources:$(src_dir)/%.c=$(build_dir)/dynamic/debug/%.o)
dynamic_release_objects := $(sources:$(src_dir)/%.c=$(build_dir)/dynamic/release/%.o)
static_debug_objects    := $(sources:$(src_dir)/%.c=$(build_dir)/static/debug/%.o)
static_release_objects  := $(sources:$(src_dir)/%.c=$(build_dir)/static/release/%.o)

# ~~~ Additional build info ~~~
cc_build_filename := cc

# Check if CC changed since last build and wipe out old objects / create directories for current target
# This is not possible using only prerequisites in GNU make (I guess)
# TODO : generalize for other options, without relying on other porgrams
define check-cc-change =
  ifeq ($(MAKECMDGOALS),$(1))
    $(shell mkdir -p $(2))
    $(if $(and $(file < $(2)/.$(cc_build_filename)),$(filter-out $(file < $(2)/.$(cc_build_filename)),$(CC))),\
      $(shell rm -r $(2)/*.o))
    $(file > $(2)/.$(cc_build_filename),$(CC))
  endif
endef

$(eval $(call check-cc-change,libescape_g.so,$(build_dir)/dynamic/debug))
$(eval $(call check-cc-change,libescape.so,$(build_dir)/dynamic/release))
$(eval $(call check-cc-change,libescape_g.a,$(build_dir)/static/debug))
$(eval $(call check-cc-change,libescape.a,$(build_dir)/static/release))


all: libescape.a

# ~~~ Cleaning rules ~~~
# See https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html
clean:
	-rm -r $(build_dir) libescape*{.a,.so} *-{sr,sd,dr,dd}
mostlyclean:
	-rm -r $(build_dir)
cleanlib:
	-rm libescape*{.a,.so}
cleantest:
	-rm test-*-{sr,sd,dr,dd}
distclean:
	-rm escape*.tar.*

.PHONY: clean mostlyclean cleanlib cleantest distclean

# TODO targets to add : dist

# ~~~ Library targets ~~~
libescape_g.so: $(dynamic_debug_objects)
	$(CC) -shared $^ -o $@

libescape.so: $(dynamic_release_objects)
	$(CC) $(STRIP_CFLAG) -shared $^ -o $@

# If one day something breaks with these two targets when using parallel builds (-j), see :
# https://www.gnu.org/software/make/manual/html_node/Archive-Pitfalls.html
libescape_g.a: $(static_debug_objects)
	$(AR) -cr $@ $?

libescape.a: $(static_release_objects)
	$(AR) -cr $@ $?

# ~~~ Pattern rules for tests of all build types ~~~
# 1st prefix letter - [s]tatic | [d]ynamic
# 2nd prefix letter - [d]ebug  | [r]elease
test-%-sr: $(test_dir)/%.c libescape.a
	$(CC) $(BASE_CFLAGS) $(RELEASE_CFLAGS) $(STRIP_CFLAG) $< -o $@ $(lastword $^)

test-%-sd: $(test_dir)/%.c libescape_g.a
	$(CC) $(BASE_CFLAGS) $(DEBUG_CFLAGS) $< -o $@ $(lastword $^)

test-%-dr: $(test_dir)/%.c libescape.so
	$(CC) $(BASE_CFLAGS) $(RELEASE_CFLAGS) $(STRIP_CFLAG) -Wl,-rpath=$(lastword $^) ./$(lastword $^) $< -o $@

test-%-dd: $(test_dir)/%.c libescape_g.so
	$(CC) $(BASE_CFLAGS) $(DEBUG_CFLAGS) -Wl,-rpath=$(lastword $^) ./$(lastword $^) $< -o $@

# ~~~ "every" rules to test all that can be built
everylibs: libescape_g.so libescape.so libescape_g.a libescape.a
# Pattern rules won't allow you to generalize this :
# https://www.gnu.org/software/make/manual/html_node/Match_002dAnything-Rules.html
every-sr-tests: $(addsuffix -sr,$(addprefix test-,$(basename $(notdir $(test_sources)))))
every-sd-tests: $(addsuffix -sd,$(addprefix test-,$(basename $(notdir $(test_sources)))))
every-dr-tests: $(addsuffix -dr,$(addprefix test-,$(basename $(notdir $(test_sources)))))
every-dd-tests: $(addsuffix -dd,$(addprefix test-,$(basename $(notdir $(test_sources)))))
# For both fun and CI/CD (should not pass if any build went wrong during compilation)
everything: everylibs every-sr-tests every-sd-tests every-dr-tests every-dd-tests

# ~~~ Pattern rules for objects of all build types ~~~
$(build_dir)/dynamic/debug/%.o: $(src_dir)/%.c
	$(CC) $(OBJ_CFLAGS) $(BASE_CFLAGS) $(DEBUG_CFLAGS) -fPIC $< -o $@

$(build_dir)/dynamic/release/%.o: $(src_dir)/%.c
	$(CC) $(OBJ_CFLAGS) $(BASE_CFLAGS) $(RELEASE_CFLAGS) -fPIC $< -o $@

$(build_dir)/static/debug/%.o: $(src_dir)/%.c
	$(CC) $(OBJ_CFLAGS) $(BASE_CFLAGS) $(DEBUG_CFLAGS) $< -o $@

$(build_dir)/static/release/%.o: $(src_dir)/%.c
	$(CC) $(OBJ_CFLAGS) $(BASE_CFLAGS) $(RELEASE_CFLAGS) $< -o $@

# ~~~ Specific object targets based inlcude directives (generated by $(CC) where the objects live) ~~~
-include $(dynamic_debug_objects:.o=.d)
-include $(dynamic_release_objects:.o=.d)
-include $(static_debug_objects:.o=.d)
-include $(static_release_objects:.o=.d)

