# ~~~~~~~~ SEMANTIC VERSIONING ~~~~~~~~
# see https://semver.org/
MAJOR_VER       := 0
MINOR_VER       := 1
PATCH_VER       := 0
PRE_RELEASE_VER := alpha

# ~~~~~~~~~~~~~~~ BUILD ~~~~~~~~~~~~~~~
# Compiler Collection - Compiles source code, e.g. gcc, clang, zig cc, whatever drop-in replacement for gcc you know
# Some compatibilty layer programs you might be interested in on Windows (when MSVC will support C23 of course) :
# https://www.gnu.org/software/automake/manual/html_node/Auxiliary-Programs.html#index-ar_002dlib
CC = gcc
# Linker (LoaDer, historical) - Links object files together to create an ELF/EXE executable, e.g. ld, lld, gold, mold, bdf
# Beware that when using LTO (see below) or an uncompatible CC, LD will need to support CC's intermediate representation, e.g. LLVM-AR (clang, zig cc), GIMPLE (gcc)
LD = ld
# ARchiver - Groups object files into an archive (which is what static libraries are), e.g. ar, llvm-ar, zig ar
AR = ar

# Used in release builds with the CC's "-O" option, e.g. -O2
OPTIM_LVL    = 2
# Used in debug builds with the CC's "-g" option, e.g. -g3
DBG_VERB_LVL = 3
# Whether or not to save intemediary files when compiling (include preprocessed sources and assembly)
TEMPS = no
# Used in release builds to remove symbols from the final binary when linking
STRIP = yes
# Used in release builds to optimize the resulted object files at link-time instead of compile-time
LTO   = yes

